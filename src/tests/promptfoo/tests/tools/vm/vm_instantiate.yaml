# Copyright 2002-2025, OpenNebula Project, OpenNebula Systems
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Test if the AI correctly calls the instantiate_vm tool with proper arguments

# Basic instantiation with required template_id only
- vars:
    input: "Create a new VM using template ID 5"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '5'

# Instantiation with VM name
- vars:
    input: "Create a new VM using template 3 and name it 'web-server-01'"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '3'
    - type: javascript
      value: output[0].arguments.vm_name === 'web-server-01'

# Instantiation with CPU and memory specifications
- vars:
    input: "Create a VM from template 2 with 2 CPUs and 4096 MB of memory"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '2'
    - type: javascript
      value: output[0].arguments.cpu === '2'
    - type: javascript
      value: output[0].arguments.memory === '4096'

# Instantiation with network specification
- vars:
    input: "Instantiate a VM using template number 1 and connect it to the 'production' network"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '1'
    - type: javascript
      value: output[0].arguments.network_name === 'production'

# Complete instantiation with all parameters
- vars:
    input: "Create a VM named 'database-server' using template 10, allocate 4 CPUs, 8192 MB memory, and connect to 'backend' network"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '10'
    - type: javascript
      value: output[0].arguments.vm_name === 'database-server'
    - type: javascript
      value: output[0].arguments.cpu === '4'
    - type: javascript
      value: output[0].arguments.memory === '8192'
    - type: javascript
      value: output[0].arguments.network_name === 'backend'

# Test that might call list_templates first, then instantiate_vm
- vars:
    input: "Deploy a new VM using template number seven. Name it 'test-vm'"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '7'
    - type: javascript
      value: output[0].arguments.vm_name === 'test-vm'

# Test with specific resource requirements
- vars:
    input: "I need a VM with 1 CPU and 2048 MB RAM from template 0, name it 'test-vm'. The template exists, therefore no need to check it."
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '0'
    - type: javascript
      value: output[0].arguments.cpu === '1'
    - type: javascript
      value: output[0].arguments.memory === '2048'
    - type: javascript
      value: output[0].arguments.vm_name === 'test-vm'

# Test that AI calls the correct tool for VM creation
- vars:
    input: "Create a new virtual machine from template number 8. The template exists, therefore no need to check it."
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '8'

# Test handling of memory units (should convert to MB)
- vars:
    input: "Create VM from template 4 with 2GB of memory"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '4'
    - type: javascript
      value: output[0].arguments.memory === '2048'

# Test network name with special characters
- vars:
    input: "Deploy VM from template 6 on the 'public-web' network. The network exists, therefore no need to check it."
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.network_name === 'public-web'

# Test that required parameter template_id is always included
- vars:
    input: "I want to create a new VM having template number 1 and 1 CPU. The template exists, therefore no need to check it."
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '1'
    - type: javascript
      value: output[0].arguments.cpu === '1'

# Test multiple VM creation request (should call two times instantiate_vm, one with num_instances=1 and one with num_instances=2)
- vars:
    input: "Create three VMs: one from template number 1 with 1 CPU, and the other two from template number 2 with 2 CPUs. The templates exist, therefore no need to check them."
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 2 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '1'
    - type: javascript
      value: output[1].arguments.template_id === '2'
    - type: javascript
      value: output[0].arguments.cpu === '1'
    - type: javascript
      value: output[1].arguments.cpu === '2'
    - type: javascript
      value: output[0].arguments.num_instances === '1'
    - type: javascript
      value: output[1].arguments.num_instances === '2'

# Basic multi-instance request
- vars:
    input: "Create 3 VMs from template 7"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '7'
    - type: javascript
      value: output[0].arguments.num_instances === '3'

# Multi-instance with naming and resources
- vars:
    input: "Instantiate 2 VMs from template 1, name them 'web-cluster', and give them 2 CPUs each"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '1'
    - type: javascript
      value: output[0].arguments.vm_name === 'web-cluster'
    - type: javascript
      value: output[0].arguments.num_instances === '2'
    - type: javascript
      value: output[0].arguments.cpu === '2'

# Natural language for instance count
- vars:
    input: "Please deploy a couple of worker VMs using template 3"
  options:
    transform: file://transforms/extract_function_call.js
  assert:
    - type: javascript
      value: output.length === 1 && output[0].function === 'instantiate_vm'
    - type: javascript
      value: output[0].arguments.template_id === '3'
    - type: javascript
      value: output[0].arguments.num_instances > '1'